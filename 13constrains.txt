constraints can be specified when the table is created with the create table statement or after the table is created with the alter table statement.constraints are 
used to specify rules for the data in a table.constraints are used to limit the type of data that cann go into a table.This ensures the accurancy and reliability of 
the data in the table.if there is any violation between the constains and the data action,then the action is aborted.constraints can be column lever or table lavel.
if you create a constraint then you either specify the name of the constraint or not.if you specify the name later when you want to disable it or enable.it will be
easiar.so it is better practice to add constraint with name.if you does not assign any name then the oracle server will implicitly assign any name to that constraint.
once the constraint add you can enable and disable that or you can also drop that constraint.if you give a name of a constriat then you can easialy drop and disable
that constranint.constraint can be added at column level or table level.in column level you can add constraint in one column.but at the table level you can share a 
single constraint with multiple columns.the name of the constraint should be unique for every column in all table.after the deletion of the table you can use the
name of that table's column constraint.


*not null--->ensures that a column cannot have a NULL value
*unique--->ensures that all values in a column are different(it prohibits multiple rows from having the same value in the same column or combination of columns but
allows some values to be null)
*primary key--->a combination of a not null and unique.uniquely identifies each row in a table.
*foreign key--->uniquely identifies a row/record in another table.(it requires values in one table to match values in anoter table)it is the part of referential 
integrity.
*check--->ensures that all values in a column satisifies a specific condition
*default--->sets a default value for a column when no value is specified
*index--->used to create and retrieve data from the database very quickly.
*ref constraint

not null
we can use the not null constriant for column level not pass to the table level.
>create table student(sno number(3) constraint std_constraint not null,sname varchar(20) not null);
in this if we do like this we cannot pass the null value to that columns.
after creation of table we can do like this
>create table student(sno number(10));
>alter table student modify sno number(10) constraint nn_constraint not null;
the data type does not necessary.we use only modify command.
#you can only modify one column at a time.

unique 
it can be column leve or table level.column level means the values does not repeat again in that particular column.in table level or muliple column level means
the combination of the value does not repeat again.ex:we have 2 column then the values combination of two columns are (1,3) , (1,1) , (2,4) , (1,3).in this all the
combinations are allowed expect the last one because that combination is already exist.it is table level constraint.
>create table sample(col1 number constraint s1 unique,col2 number,col3 varchar(2),constriant s2 unique(col1,col2));
in this case the col1 is column level constrain and the col2,col3 is table leve constraint.we can also use
>create table sample(col1 number(2),col char,constraint s3 unique(col1))
in this the col1 is column level constraint.
we can use null value many times in unique constriant column.
we can also do like this,
>create table sample(cols1 number,cols2 number,cols3 varchar(2));
>alter table sample add constraint ex unique(col1);
>alter table sample add constraint exx unique(col2,col3);
we can also do like this after these queries,
>alter table sample add constraint exxx unique(col1,col2);


primary key
column level constraint
>create table sample(col1 number constraint first primary key,col2 number);
table level constraint is behave not like primary key but behave like composite key.ex:
>create table sample(col1 number,col2 varchar,constraint first primary key(col1,col2));
in this if we use only one column then it will be column level constraint.
>create table sample(col1 number,col2 number,col3 varchar(2));
>alter table sample add constraint first primary key(col1,col3);


there is two way of representing primary key for a column.
1)>create table student(sno number(3) primary key,name varchar(20));
			or
>create tabel student(sno number(3),name varchar(20),primary key(sno));

2)>create tabel student(sno number(3),name varchar(20));
>alter table student add primary key(sno);

>alter table student drop primary key;
use this query to drop all primary key in the student table.but if you have child table then you cannot drop the primary key.you cannot drop that primary key column
using normal column drop query at this case.otherwise can.

note:if you have some entity in a table and then if you add column then you cannot change it to primary key.because it will have null value by default when alter add
column.also we canno use this query >alter table student ssno number(2) primary key; it shows table must be empty to add mandatory (NOT NULL) column. 



foreign key
foreign key column can have null values.
this is also have two way to representation and plus one
1)>create tabel employee(eno number(4) references student(sno),salary number(5));
			or
>create table employee(eno int,salary number(6),foreign key references student(sno));

2)>create table employee(eno number(3),salary number(10));
>alter table employee add foreign key(eno) references student(sno);

note:we can use another name for child table foreign key,and data type size not restricted,we can use int in child table instead of number in parent table.but not
other data type.we can create a foreign key column for a parent table before or after the entries of that parent table that not matter.but if you enter value for
foreign key there must be that value in the parent table primary key.you cannot drop a parent table when it's child table exist.but after drop your child table it
will possible.
note:in second case before you alter the table if you insert any entity for that foreign key column then if that value of that column is equlas to the parent primary
column then it can be alter to it's child table otherwise cannot.

3)>create table employee(eno number(3),constraint con_peyar foreign key(eno) references student(sno));
				or
>create table employee(eno number(3));
>alter table employee add constraint con_name foreign key(eno) references student(sno);

this method is to allow naming of a foreign key constraint, and for defining a foreign key constraint on multiple columns.

>alter table employee drop constraint con_name
this query is used to drop the foreign key constraint.
#if you have primary key and foreign key then if you delete the primary key column then all the related foreign key values(records) will deleted.we use on delete 
cascade to do this.if we use on delete set null for the previous case then all the related foreign key values will become null.if you do other thing to delete 
the record in primary column then the oracle server does not allow to delete it.ex:
>create table sample(cols1 number primary key);
>create table sample2(cols2 number);
>alter table sample2 add constraint first foreign key(cols2) references sample(cols1) on delete set null;


check
>create table sample(col1 number(10) constraint first check(col1>=100));
			or
>create table sample(gender char);
>alter table sample add constraint first check(gender in('M','F'));
in this the gender only accecp 'M' and 'F' vales.


view constraints in the table
#we have the data dictionary called user_constraint(type desc user_constraint).we can use it to see the what kind of constraint we have in the table.ex:
>desc user_constraints;
>select constraint_name,constraint_type from constriants where table_name='SAMPLE';
#the table name must be in capital.
#in this u-->unique,p-->primary key,c-->check or not null,R-->relationship(foreign key).
>desc user_cons_columns
>select constraint_name,column_name from user_cons_columns where table_name='SAMPLE';


disable,enable,drop constraint
>alter table sample disable constraint constraint_name;
>alter table sample enable constraint constraint_name;
>alter table sample drop constraint constraint_name;